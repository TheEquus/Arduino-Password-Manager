###########
# imports #
###########
import serial
import random
import os
import string
import PySimpleGUI as sg
import hashlib
import pyperclip
##############################

#############
# constants #
#############
# min and max range for random number - can be changed to allow for control over length of password generated
NUM_MIN = 1000000000000000
NUM_MAX = 9999999999999999

# default name of password file
FILE = "PW.txt"

# message to send when requesting random number (means 1 by itself cannot be a password, but hopefully no one sane has this as their password)
REQ_NUM = '1'

##############################

#############
# functions #
#############
# uses random number generated by sensors as seed for a bigger random number
def getRandNum(num):
    random.seed(os.urandom(num))
    return random.randint(NUM_MIN,NUM_MAX)

# gets a large number, uses it as index to alphabet, and returns a password
def genPassword(num):
    randNum = getRandNum(num)
    in_num = str(randNum)
    password = ""
    for i in range(len(in_num)//2):
        index = in_num[i*2:(i*2)+2]
        password += alphabet[int(index[0])][int(index[1])]
    return password

# Handles password input, replacing text with astericks, whilst saving/remembering input
def hideInput(masterPass, values, input):
    if len(input) <= 0:
        masterPass = ""
    elif len(input) < len(masterPass):
        masterPass = masterPass[:-1]
    elif len(input) > len(masterPass):
        masterPass += input[-1]
    return masterPass

# encode string into numbers based on alphabet
def encodePass(pw):
    encoded = ""
    for char in pw:
        # determine which list char is in
        for i in range(len(alphabet)):
            if char in alphabet[i]:
                # get index
                j = alphabet[i].index(char)
                break
        encoded += (str(i) + str(j))
    return encoded

# decode number (of type string) into string based on alphabet
def decodePass(num):
    pw = ""
    for i in range(len(num)//2):
        index = num[i*2:(i*2)+2]
        pw += alphabet[int(index[0])][int(index[1])]
    return pw

# retrieve passwords from pw file
def getPasswords(file):
    file.seek(0)
    data = file.readlines()[1:]
    accountNames = []
    passwords = []
    for account in data:
        username,password = account.split(',')
        accountNames.append(username.strip())
        passwords.append(decodePass(password.strip()))

    return [accountNames, passwords]

# delete account by index
def deleteAccount(file, index):
    file.seek(0)
    data = file.readlines()
    file.seek(0)
    for i in range(len(data)):
        if i != index + 1:
            file.write(data[i])
    return file

# Update accounts and passwords list
def updateAccounts(pw_file):
    detailsList = getPasswords(pw_file)
    detailsDict = dict(zip(detailsList[0],detailsList[1]))
    accounts = list(detailsDict.keys())
    return (detailsDict, accounts)
# Logic for logging into the password manager
def loginWindow(check):
    returnCode = 0
    # layout for login
    loginLayout = [
        [sg.Text("This is a password manager test")],
        [sg.In(key="-PASSWORD-", size=(50,1), enable_events=True),sg.Button("Next", key="-NEXT-")],
        [sg.Text(key="-ERROR-", size=(50,1), text_color="red")]
    ]

    window = sg.Window(title="Password Manager", layout=loginLayout)
    # Master password variable
    masterPass = ""
    while True:
        event, values = window.read()
        if event == sg.WIN_CLOSED:
            returnCode = 1
            break
        # save keypresses to password variable, and hide input from screen
        elif event == "-PASSWORD-":
            masterPass = hideInput(masterPass, values, values["-PASSWORD-"])
            window["-PASSWORD-"].update("*"*len(masterPass))
        # verify hash of password inputted
        elif event == "-NEXT-":
            if hashlib.sha256(masterPass.encode()).hexdigest() == check:
                break
            else:
                window["-ERROR-"].update("Incorrect password")
    window.close()
    return returnCode

# Logic for signing up to the password manager
def signupWindow():
    returnCode = 0
    # layout for signup page
    signupLayout = [
        [sg.Text("Please enter a password for the manager")],
        [sg.In(key="-PASS1-", size=(50,5), enable_events=True)],
        [sg.Text("Please confirm your password")],
        [sg.In(key="-PASS2-", size=(50,5), enable_events=True)],
        [sg.Text(key="-ERROR-", text_color="red")],
        [sg.Button("Sign up", key="-SIGNUP-")]
    ]

    window = sg.Window(title="Password Manager", layout=signupLayout)
    masterPass = ""
    confirm = ""
    while True:
        event, values = window.read()
        if event == sg.WIN_CLOSED:
            returnCode = 1
            break
        # hide input being put into password fields
        elif event == "-PASS1-":
            masterPass = hideInput(masterPass, values, values["-PASS1-"])
            window["-PASS1-"].update("*"*len(masterPass))
        elif event == "-PASS2-":
            confirm = hideInput(confirm, values, values["-PASS2-"])
            window["-PASS2-"].update("*"*len(confirm))
        # verify both fields have the same input
        elif event == "-SIGNUP-":
            if (confirm != masterPass):
                window["-ERROR-"].update("Passwords do not match")
            else:
                pw = hashlib.sha256(masterPass.encode()).hexdigest()
                pw_file.write(pw+'\n')
                break
    window.close()
    return returnCode

# logic for main/home screen of password manager
def homeWindow():
    returnCode = 0
    (detailsDict, accounts) = updateAccounts(pw_file)
    # seperate window into two main columns
    leftCol = [
        [sg.Listbox(accounts, size=(50,25), key='-ACCOUNTS-', enable_events=True)]
    ]
    rightCol = [
        [sg.Column([
            [sg.Column([
                [sg.Text("Password")],
                [sg.Text(size=(40,1), key='-DISPLAY-'), sg.Button("Copy", key='-COPY-'), sg.Button("See password", key='-SHOW-')],
                [sg.Button("Delete", key="-DELETE-", button_color="red")]
            ], key='-DISPASS-', visible=False)],
            [sg.Column([
                [sg.Text("Account Name")],
                [sg.In(key='-ACCOUNTNAME-')],
                [sg.Text("Password")],
                [sg.In(enable_events=True, key='-NPASS-'), sg.Button("Generate password", key='-GEN-'), sg.Button("Show password", key='-SHOWNEW-')],
                [sg.Text(key='-ERROR-', text_color="red")],
                [sg.Button("Create", key='-CREATE-')]
            ], key='-NEW-', visible=False)]
        ])]
    ]
    homeLayout = [
        [sg.Text("Accounts", font=(sg.DEFAULT_FONT, 25))],
        [sg.Column(leftCol), sg.VSeperator(),sg.Column(rightCol)],
        [sg.Button("New password", key="-ADD-")]
    ]
    window = sg.Window(title="Password Manager", layout=homeLayout)
    password = ""
    newPass = ""
    newHide = True
    passHide = True
    while True:
        event, values = window.read()
        if event == sg.WIN_CLOSED:
            returnCode = 1
            break
        # load password onto screen given selection on list box
        elif event == '-ACCOUNTS-':
            if accounts:
                window['-NEW-'].update(visible=False)
                window['-ERROR-'].update("")
                window["-NPASS-"].update("")
                newPass = ""
                password = detailsDict[values['-ACCOUNTS-'][0]]
                window['-DISPLAY-'].update('*'*8)
                passHide = True
                window['-DISPASS-'].update(visible=True)
        # toggle hide/show password
        elif event == '-SHOW-':
            if passHide:
                window['-DISPLAY-'].update(password)
            else:
                window['-DISPLAY-'].update('*'*8)
            passHide = not passHide
        # show new password screen
        elif event == '-ADD-':
            window['-NEW-'].update(visible=True)
            password = ""
            window['-DISPASS-'].update(visible=False)
        # update new password with input, hiding input from view if necessary
        elif event == '-NPASS-':
            if newHide:
                newPass = hideInput(newPass, values, values['-NPASS-'])
                window['-NPASS-'].update('*'*len(newPass))
            else:
                newPass = values['-NPASS-']
        # toggle new password view
        elif event == '-SHOWNEW-':
            update = ""
            if newHide:
                update = newPass
            else:
                update = '*'*len(newPass)
            window['-NPASS-'].update(update)
            newHide = not newHide
        # generate new random number/password
        elif event == '-GEN-':
            s.write(f'{REQ_NUM}\n'.encode())
            randNum = s.readline().decode().strip()
            newPass = genPassword(int(randNum))
            if newHide:
                update = '*'*len(newPass)
            else:
                update = newPass
            window['-NPASS-'].update(update)
        elif event == '-CREATE-':
            # check account name and password provided
            if len(values['-ACCOUNTNAME-']) == 0 or len(values['-NPASS-']) == 0:
                window['-ERROR-'].update("Please enter an account name and password")
            elif values['-ACCOUNTNAME-'] in accounts:
                window['-ERROR-'].update("An account with this name already exists")
            else:
                # add new password to file
                pw_file.write(f"{values['-ACCOUNTNAME-']}, {encodePass(newPass)}\n")
                window['-NEW-'].update(visible=False)
                window['-ERROR-'].update("")
                window['-ACCOUNTNAME-'].update("")
                window['-NPASS-'].update("")
                (detailsDict, accounts) = updateAccounts(pw_file)
                window['-ACCOUNTS-'].update(values=accounts)
                s.write(f"{newPass}\n".encode())
                newPass = ""
        elif event == '-COPY-':
            pyperclip.copy(password)
        # delete and reflect on the pw file
        elif event == "-DELETE-":
            line = accounts.index(values['-ACCOUNTS-'][0])
            pw_file.seek(0)
            data = pw_file.readlines()
            pw_file.seek(0)
            pw_file.truncate()
            for i in range(len(data)):
                if i != line + 1:
                    pw_file.write(data[i])
            (detailsDict, accounts) = updateAccounts(pw_file)
            window['-ACCOUNTS-'].update(values=accounts)
            window['-DISPASS-'].update(visible=False)
    window.close()
    return returnCode

# main function
def main():
    loginFail = 1
    # if password file exists, save data within file, and login
    if (file_exists):
        data = pw_file.readlines()
        if data:
            loginFail = loginWindow(data[0].strip())
    # if not, go sign up, then deal with login
    else:
        success = signupWindow()
        if success == 0:
            pw_file.seek(0)
            loginFail = loginWindow(pw_file.readlines()[0].strip())

    # deal with home logic if login successful
    if not loginFail:
        homeWindow()
    pw_file.close()

##############################


########
# main #
########
if __name__ == '__main__':
    serialPort = input("Enter serial port: ")
    try:
        # serial definition
        s = serial.Serial(serialPort, baudrate=9600)
    except:
        print("Port could not be connected to, please ensure the port is correct and open, then try again")
        exit()
    # Checking / creation of password file
    file_exists = os.path.exists(FILE) and os.path.getsize(FILE)
    if not file_exists:
        open(FILE, 'w').close()
    pw_file = open(FILE, 'r+')
    # Building the password alphabet -> length = 100
    all_chars = string.ascii_letters + (string.digits * 4) + "!@#$%^&*"
    alphabet = [all_chars[i*10:(i*10)+10] for i in range(10)]

    main()

    pw_file.close()
    s.close()
